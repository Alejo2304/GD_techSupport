

# -----Ciudad-----

@app.post(
    "/consultarciudad",
    response_model=list,
    summary="Consultar Ciudad",
    description="Consultar Entidad Ciudad",
    tags=["Entidades"]
)
async def consultar_ciudad(ciudadmodelo: CiudadModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readciudad")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Departamento-----

@app.post(
    "/consultardepartamento",
    response_model=list,
    summary="Consultar Departamento",
    description="Consultar Entidad Departamento",
    tags=["Entidades"]
)
async def consultar_departamento(departamentomodelo: DepartamentoModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readdepartamento")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Detallediagnostico-----

@app.post(
    "/consultardetallediagnostico",
    response_model=list,
    summary="Consultar Detallediagnostico",
    description="Consultar Entidad Detallediagnostico",
    tags=["Entidades"]
)
async def consultar_detallediagnostico(detallediagnosticomodelo: DetallediagnosticoModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readdetallediagnostico")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Detallefactura-----

@app.post(
    "/consultardetallefactura",
    response_model=list,
    summary="Consultar Detallefactura",
    description="Consultar Entidad Detallefactura",
    tags=["Entidades"]
)
async def consultar_detallefactura(detallefacturamodelo: DetallefacturaModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readdetallefactura")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Diagnostico-----

@app.post(
    "/consultardiagnostico",
    response_model=list,
    summary="Consultar Diagnostico",
    description="Consultar Entidad Diagnostico",
    tags=["Entidades"]
)
async def consultar_diagnostico(diagnosticomodelo: DiagnosticoModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readdiagnostico")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Direccion-----

@app.post(
    "/consultardireccion",
    response_model=list,
    summary="Consultar Direccion",
    description="Consultar Entidad Direccion",
    tags=["Entidades"]
)
async def consultar_direccion(direccionmodelo: DireccionModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readdireccion")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Dispositivo-----

@app.post(
    "/consultardispositivo",
    response_model=list,
    summary="Consultar Dispositivo",
    description="Consultar Entidad Dispositivo",
    tags=["Entidades"]
)
async def consultar_dispositivo(dispositivomodelo: DispositivoModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readdispositivo")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Empleado-----

@app.post(
    "/consultarempleado",
    response_model=list,
    summary="Consultar Empleado",
    description="Consultar Entidad Empleado",
    tags=["Entidades"]
)
async def consultar_empleado(empleadomodelo: EmpleadoModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readempleado")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Empresa-----

@app.post(
    "/consultarempresa",
    response_model=list,
    summary="Consultar Empresa",
    description="Consultar Entidad Empresa",
    tags=["Entidades"]
)
async def consultar_empresa(empresamodelo: EmpresaModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readempresa")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Estadodiagnostico-----

@app.post(
    "/consultarestadodiagnostico",
    response_model=list,
    summary="Consultar Estadodiagnostico",
    description="Consultar Entidad Estadodiagnostico",
    tags=["Entidades"]
)
async def consultar_estadodiagnostico(estadodiagnosticomodelo: EstadodiagnosticoModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readestadodiagnostico")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Estadofactura-----

@app.post(
    "/consultarestadofactura",
    response_model=list,
    summary="Consultar Estadofactura",
    description="Consultar Entidad Estadofactura",
    tags=["Entidades"]
)
async def consultar_estadofactura(estadofacturamodelo: EstadofacturaModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readestadofactura")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Factura-----

@app.post(
    "/consultarfactura",
    response_model=list,
    summary="Consultar Factura",
    description="Consultar Entidad Factura",
    tags=["Entidades"]
)
async def consultar_factura(facturamodelo: FacturaModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readfactura")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Pais-----

@app.post(
    "/consultarpais",
    response_model=list,
    summary="Consultar Pais",
    description="Consultar Entidad Pais",
    tags=["Entidades"]
)
async def consultar_pais(paismodelo: PaisModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readpais")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Sede-----

@app.post(
    "/consultarsede",
    response_model=list,
    summary="Consultar Sede",
    description="Consultar Entidad Sede",
    tags=["Entidades"]
)
async def consultar_sede(sedemodelo: SedeModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readsede")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Tipodispositivo-----

@app.post(
    "/consultartipodispositivo",
    response_model=list,
    summary="Consultar Tipodispositivo",
    description="Consultar Entidad Tipodispositivo",
    tags=["Entidades"]
)
async def consultar_tipodispositivo(tipodispositivomodelo: TipodispositivoModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readtipodispositivo")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Tipodocumento-----

@app.post(
    "/consultartipodocumento",
    response_model=list,
    summary="Consultar Tipodocumento",
    description="Consultar Entidad Tipodocumento",
    tags=["Entidades"]
)
async def consultar_tipodocumento(tipodocumentomodelo: TipodocumentoModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readtipodocumento")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Tipoempleado-----

@app.post(
    "/consultartipoempleado",
    response_model=list,
    summary="Consultar Tipoempleado",
    description="Consultar Entidad Tipoempleado",
    tags=["Entidades"]
)
async def consultar_tipoempleado(tipoempleadomodelo: TipoempleadoModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readtipoempleado")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Tipogenero-----

@app.post(
    "/consultartipogenero",
    response_model=list,
    summary="Consultar Tipogenero",
    description="Consultar Entidad Tipogenero",
    tags=["Entidades"]
)
async def consultar_tipogenero(tipogeneromodelo: TipogeneroModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readtipogenero")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Tipousuario-----

@app.post(
    "/consultartipousuario",
    response_model=list,
    summary="Consultar Tipousuario",
    description="Consultar Entidad Tipousuario",
    tags=["Entidades"]
)
async def consultar_tipousuario(tipousuariomodelo: TipousuarioModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readtipousuario")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results

# -----Usuario-----

@app.post(
    "/consultarusuario",
    response_model=list,
    summary="Consultar Usuario",
    description="Consultar Entidad Usuario",
    tags=["Entidades"]
)
async def consultar_usuario(usuariomodelo: UsuarioModelo) -> list:
    results = []
    db = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    try:
        cursor = db.cursor()
        cursor.callproc("readusuario")
        for item in list(cursor.stored_results()):
            results = item.fetchall()
        db.commit()
        cursor.close()
    except Exception as ex:
        raise ValueError(ex)
    finally:
        db.disconnect()
    return results